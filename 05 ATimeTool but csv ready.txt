#include "Wire.h" // This library allows you to communicate with I2C devices.

const int MPU_ADDR = 0x68; // I2C address of the MPU-6050. If AD0 pin is set to HIGH, the I2C address will be 0x69.

int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data

int direction = 0;
int oldDirection = 0;

void setup()
{
  Serial.begin(9600);
  Wire.begin();
  Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)
  Wire.write(0x6B); // PWR_MGMT_1 register
  Wire.write(0); // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
}
void loop() {
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7 * 2, true); // request a total of 7*2=14 registers

  accelerometer_x = Wire.read() << 8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  accelerometer_y = Wire.read() << 8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  accelerometer_z = Wire.read() << 8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)


  if (accelerometer_z > -7000 && accelerometer_z < -100 && accelerometer_x > 0) {
    direction = 1;
  }
  if (accelerometer_z > 0 && accelerometer_x < 7000 && accelerometer_x > -7000) {
    direction = 2;
  }
  if (accelerometer_z > -7000 && accelerometer_z < -100 && accelerometer_x < 0) {
    direction = 3;
  }
    if (accelerometer_z < 0 && accelerometer_x < 4000 && accelerometer_x > -3000) {
    direction = 4;
  }

  if (direction != oldDirection) // Check if direction changed.
  {
    Serial.print(",");
    if (direction == 1) Serial.println("task1"); // Print the direction that is facing upwards.
    if (direction == 2) Serial.println("task2");
    if (direction == 3) Serial.println("task3");
    if (direction == 4) Serial.println("task4");

    oldDirection = direction; // After printing save the last direction so we can see a change next time it changes.
  }
  
  // For debug.
//  Serial.println(accelerometer_x);
//  Serial.println(accelerometer_y);
//  Serial.println(accelerometer_z);
  // delay
  delay(200);
}